C51 COMPILER V9.54   PWM                                                                   04/30/2020 01:44:05 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN pwm.OBJ
COMPILER INVOKED BY: D:\MDK\C51\BIN\C51.EXE pwm.c LARGE OPTIMIZE(8,SPEED) BROWSE MODP2 DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "pwm.h"
   2          
   3          
   4          //调换舵机口顺序
   5          code uchar changeOrder[21] = { 0,1,2,3,4,5,6,7,20, 8,9,10,11,12,13,14,15,19, 18,17,16};
   6          
   7          //21路PWM 定时值的高8位与低8位
   8          static uchar timingValueH[24]= {0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF5, 0xF5,0xF5,0xF5,0xF5,0xF5,0xF5,0xF
             -5,0xF5, 0xF5,0xF5,0xF5,0xF5,0xF5, 0xC6,0xC6,0xA6};
   9          static uchar timingValueL[24]= {0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33, 0x33,0x33,0x33,0x33,0x33,0x33,0x3
             -3,0x33, 0x33,0x33,0x33,0x33,0x33, 0x66,0x66,0x00};
  10          
  11          //三组定时器使用的pwm计数值下标
  12          static uchar PwmCH0_CountFlag = 0;
  13          static uchar PwmCH1_CountFlag = 0;
  14          static uchar PwmCH2_CountFlag = 0;
  15          
  16          //低电平的剩余时间
  17          static uint PwmCH0_TimingLeftValue = 0;
  18          static uint PwmCH1_TimingLeftValue = 0;
  19          static uint PwmCH2_TimingLeftValue = 0;
  20          
  21          
  22          //引脚定义:
  23          //P44->H1 P43->H2 P42->H3
  24          //P20->L1     P00->R1
  25          //P21->L2     P01->R2
  26          //P22->L3     P02->R3
  27          //P23->L4     P03->R4
  28          //P24->L5     P04->R5
  29          //P25->L6     P05->R6
  30          //P26->L7     P06->R7
  31          //P27->L8     P07->R8
  32          //P45->L9     P46->R9
  33          //P4^4->H1 P4^3->H2  P4^2->H3
  34          
  35          //pwm通道0 同时生成8路pwm信号 timingValueH timingValueL中前8个数据决定高电平时间
  36          void PwmCH0_Control(void)
  37          {
  38   1          if( PwmCH0_CountFlag == 8 )  //到达剩余低电平时间
  39   1          {
  40   2              P0 = 0x00;
  41   2              CH0_TH = timingValueH[21];
  42   2              CH0_TL = timingValueL[21];
  43   2          }
  44   1          else   //定时pwmL1~8
  45   1          {
  46   2              if( PwmCH0_CountFlag == 0 )
  47   2                  P0 = 0x01;
  48   2              else
  49   2                  P0 <<= 1;
  50   2              CH0_TH = timingValueH[ PwmCH0_CountFlag ]; //定时时间赋值
  51   2              CH0_TL = timingValueL[ PwmCH0_CountFlag ];
  52   2          }
  53   1          PwmCH0_CountFlag = (PwmCH0_CountFlag+1)%9;  //下标推进
C51 COMPILER V9.54   PWM                                                                   04/30/2020 01:44:05 PAGE 2   

  54   1      }
  55          
  56          //pwm通道1 同时生成8路pwm信号 timingValueH timingValueL中第9-16个数据决定高电平时间
  57          void PwmCH1_Control(void)
  58          {
  59   1          if( PwmCH1_CountFlag == 8 )  //到达剩余低电平时间
  60   1          {
  61   2              P2 = 0x00;
  62   2              CH1_TH = timingValueH[22];
  63   2              CH1_TL = timingValueL[22];
  64   2          }
  65   1          else   //定时pwmR1~8
  66   1          {
  67   2              if( PwmCH1_CountFlag == 0 )
  68   2                  P2 = 0x01;
  69   2              else
  70   2                  P2 <<= 1;
  71   2              CH1_TH = timingValueH[ PwmCH1_CountFlag+8 ]; //定时时间赋值
  72   2              CH1_TL = timingValueL[ PwmCH1_CountFlag+8 ];
  73   2          }
  74   1          PwmCH1_CountFlag = (PwmCH1_CountFlag+1)%9;  //下标推进
  75   1      }
  76          
  77          //pwm通道2 同时生成5路pwm信号 timingValueH timingValueL中第17-21个数据决定高电平时间
  78          void PwmCH2_Control(void)
  79          {
  80   1          if( PwmCH2_CountFlag == 5 )  //到达剩余低电平时间
  81   1          {
  82   2              P4 &= 0x83;
  83   2              CH2_TH = timingValueH[23];
  84   2              CH2_TL = timingValueL[23];
  85   2          }
  86   1          else   //定时pwmH0~4
  87   1          {
  88   2              if( PwmCH1_CountFlag == 0 )
  89   2                  P4 = P4&0x83|0x04;
  90   2              else
  91   2                  P4 = P4&0x83|(0x04<<PwmCH2_CountFlag);
  92   2              CH2_TH = timingValueH[ PwmCH2_CountFlag+16 ]; //定时时间赋值
  93   2              CH2_TL = timingValueL[ PwmCH2_CountFlag+16 ];
  94   2          }
  95   1          PwmCH2_CountFlag = (PwmCH2_CountFlag+1)%6;  //下标推进
  96   1      }
  97          
  98          //通过指定高电平时间来改变timingValueH timingValueL中的值，达到改变对应pwm信号的高电平时间
  99          void PwmChange(uchar pwmNumber,uint pwmDuty)  //pwmNumber范围0~20 pwmDuty(1~2500us)
 100          {
 101   1          pwmDuty = 65536-(uint)pwmDuty*1.8432;//因为用的是22.118400MHz晶振  定时器12分频 1us有1.8432个节拍
 102   1      //先改变定时时间的值
 103   1      //使用位操作,运算速度更快
 104   1          pwmNumber = changeOrder[pwmNumber]; //调换顺序
 105   1          timingValueH[pwmNumber] =  pwmDuty>>8;  //赋值此路pwm
 106   1          timingValueL[pwmNumber] =  (pwmDuty<<8)>>8; //赋值此路pwm
 107   1      }
 108          
 109          //更新剩余低电平时间
 110          void UpDataTimingLeft()
 111          {
 112   1          uchar count;
 113   1          
 114   1          //计算剩余低电平的剩余时间
 115   1          PwmCH0_TimingLeftValue = 28672;//20ms 需要大概36864个计数值 28672 = 65536-36864
C51 COMPILER V9.54   PWM                                                                   04/30/2020 01:44:05 PAGE 3   

 116   1          for( count = 0 ; count<8 ; count++ )
 117   1              PwmCH0_TimingLeftValue += ( 65536-(timingValueH[count]<<8|timingValueL[count]) ); //注意'|'符号不�
             -苡眉哟� 向下兼容，数据会变成8位
 118   1          timingValueH[21] = PwmCH0_TimingLeftValue>>8; //更新剩余低电平时间
 119   1          timingValueL[21] = PwmCH0_TimingLeftValue;  //等价于 timingValueL[21] = (PwmCH0_TimingLeftValue<<8)>>8;
 120   1      
 121   1          PwmCH1_TimingLeftValue = 28672;//20ms 需要大概36864个计数值 28672 = 65536-36864
 122   1          for( count = 8 ; count<16 ; count++ )
 123   1              PwmCH1_TimingLeftValue += ( 65536-(timingValueH[count]<<8|timingValueL[count]) ); //注意'|'符号不�
             -苡眉哟� 向下兼容，数据会变成8位
 124   1          timingValueH[22] = PwmCH1_TimingLeftValue>>8; //更新剩余低电平时间
 125   1          timingValueL[22] = PwmCH1_TimingLeftValue;  //等价于 timingValueL[22] = (PwmCH1_TimingLeftValue<<8)>>8;
 126   1      
 127   1          PwmCH2_TimingLeftValue = 28672;//20ms 需要大概36864个计数值 28672 = 65536-36864
 128   1          for( count = 16 ; count<21 ; count++ )
 129   1              PwmCH2_TimingLeftValue += ( 65536-(timingValueH[count]<<8|timingValueL[count]) ); //注意'|'符号不�
             -苡眉哟� 向下兼容，数据会变成8位
 130   1          timingValueH[23] = PwmCH2_TimingLeftValue>>8; //更新剩余低电平时间
 131   1          timingValueL[23] = PwmCH2_TimingLeftValue;  //等价于 timingValueL[23] = (PwmCH2_TimingLeftValue<<8)>>8;
 132   1          
 133   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    603    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =     57       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
